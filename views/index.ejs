<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LeaderBoard</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/themes/prism.min.css" rel="stylesheet" />
    <style>
        table {
            font-family: Arial, sans-serif;
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid #dddddd;
            text-align: left;
            padding: 8px;
        }
        th {
            background-color: #f2f2f2;
        }

       
        .container {
        text-align: center;
        position: relative; /* Add relative positioning */
        }

        .day {
        font-size: 25px;
        position: absolute; /* Add absolute positioning */
        right: 10px; /* Adjust right position */
        top: 0px;
         }

         /* Modal styles */
         .modal {
            display: none; /* Hidden by default */
            position: fixed; /* Stay in place */
            z-index: 1; /* Sit on top */
            padding-top: 60px; /* Location of the box */
            left: 0;
            top: 0;
            width: 100%; /* Full width */
            height: 100%; /* Full height */
            overflow: auto; /* Enable scroll if needed */
            background-color: rgb(0,0,0); /* Fallback color */
            background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto; /* 15% from the top and centered */
            padding: 20px;
            border: 1px solid #888;
            width: 80%; /* Could be more or less, depending on screen size */
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        .verdict {
            font-weight: bold;
        }

        .verdict.accepted {
            color: green;
        }

        .verdict.rejected {
            color: red;
        }

        pre[class*="language-"] {
            margin: 0;
            padding: 0;
        }

        /* Custom CSS to ensure consistent background color */
        .token {
            background: none !important;
        }

        .clickable {
        color: #1a73e8;
        cursor: pointer;
        text-decoration: underline;
    }

    .clickable:hover {
        color: darkblue;
    }

    .details {
      display: none;
      margin-top: 10px;
    }
    .details table {
      border-collapse: collapse;
      width: 100%;
    }
    .details th, .details td {
      border: 1px solid #ddd;
      padding: 8px;
    }
    .details th {
      background-color: #f2f2f2;
    }

    
    </style>

    <link rel="stylesheet" href="/styles.css">
</head>
<body>
    
    <div class="container">
        <h1 class="title">Mac LeetCode LeaderBoard</h1>
        <span class="day"><%= day %></span>
    </div>

    <div>
        <button onclick="showOverall()">Overall</button>
        <button onclick="showWeekly()" id="weekly">Weekly</button>
        <button onclick="showRecentSubmissions()">Recent Submissions</button>
        <button onclick="showContest()">Contest</button>
        <button onclick="showLeaderBoard()">LeaderBoard</button>
        
    </div>

    <table id="leaderboard">
        <thead>
            <tr>
                <th>Sno</th>
                <th>Username</th>
                <th>Easy</th>
                <th>Medium</th>
                <th>Hard</th>
                <th>Total</th>
                <th>Points</th>
            </tr>
        </thead>
        <tbody>
            <% user_solved.forEach(function(user, index) { %>
                <tr>
                    <td><%= index + 1 %></td>
                    <td><a href="https://leetcode.com/<%= user.name %>"><%= user.name %></a></td>
                    <td><span id="easy_<%= index %>"><%= user.easy %></span></td>
                    <td><span id="medium_<%= index %>"><%= user.medium %></span></td>
                    <td><span id="hard_<%= index %>"><%= user.hard %></span></td>
                    <td><span id="total_<%= index %>"><%= user.total %></span></td>
                    <td><span id="points_<%= index %>"><%= user.points %></span></td>
                </tr>
            <% }); %>
        </tbody>
    </table>

    <table id="contestTable" style="display: none;">
        <thead>
          <tr>
            <th>Sno</th>
            <th>Username</th>
            <th>Contests Attended</th>
            <th>Rating</th>
            <th>Global Ranking</th>
            <th>Top Percentage</th>
            <th>Badge</th>
          </tr>
        </thead>
        <tbody>
          <% contests.forEach((contest,index) => { %>
            <tr>
            <td><%= index + 1 %></td>
              <td><a href="https://leetcode.com/<%= contest.username%>"><%= contest.username %> </a></td>
              <td><span class="clickable">
                <a href="#" onclick="toggleDetails('<%= contest.username %>'); return false;"><%= contest.userContestRanking.attendedContestsCount %></a></td>
            </span>
              <td><%= contest.userContestRanking.rating %></td>
              <td><%= contest.userContestRanking.globalRanking %></td>
              <td><%= contest.userContestRanking.topPercentage %></td>
              <td> <% if (contest.userContestRanking.badge) { %>
                <%= contest.userContestRanking.badge.name %>
              <% } else { %>
                None
              <% } %></td>
            </tr>
            <tr class="details" id="details-<%= contest.username %>">
                <td colspan="7">
                  <h3>Details for <%= contest.username %></h3>
                  <table >
                    <thead>
                      <tr>
                        <th>Sno</th>
                        <th>Contest Title</th>
                        <th>Problem Solved</th>
                        <th>Finish Time</th>
                        <th>Ranking</th>
                        <th>Rating</th>
                        <th>Rating Change</th>
                      </tr>
                    </thead>
                    <tbody>
                      <% let previousRating = 1500; %>
                      <% contest.attendedContests.forEach((c, index) => { %>
                        <tr>
                            <td><%= index + 1 %></td>
                            <td><%= c.contest.title %></td>
                            <td><%= c.problemsSolved %></td>
                            <td><%=c.formattedFinishTime %></td>
                            <td><%= c.ranking %></td>
                            <td><%= c.roundedContestRating %></td>
                         
                          <td>
                            <span class="verdict <%= c.ratingChange >= 0 ? 'accepted' : 'rejected' %>">
                                <%= c.ratingChange >= 0 ? '+' + c.ratingChange : c.ratingChange %>
                              </span>
                        </td>
                          
                        </tr>
                      <% }) %>
                    </tbody>
                  </table>
                </td>
              </tr>
          <% }) %>
        </tbody>
      </table>

      <script>
        function toggleDetails(username) {
          const detailsRow = document.getElementById(`details-${username}`);
          if (detailsRow.style.display === 'none' || detailsRow.style.display === '') {
            detailsRow.style.display = 'table-row';
          } else {
            detailsRow.style.display = 'none';
          }
        }
      </script>
    <table id="recentSubmissionsTable" style="display: none;">
        <thead>
            <tr>
                <th>Sno</th>
                <th>Username</th>
                <th>Time</th>
                <th>Problem</th>
                <th class="verdict">Verdict</th>
            </tr>
        </thead>
        <tbody>
            <% var serialNumber = 1; %>
            <% submissions.forEach(function(submission) { %>
                <% if (serialNumber <= 200) { %>
                    <tr>
                        <td><%= serialNumber++ %></td>
                        <td><a href="https://leetcode.com/<%= submission.user %>"><%= submission.user %></a></td>
                        <td>
                            <span style="display:none;" id="submission-id-<%= serialNumber %>"><%= submission.id %></span>
                            <span
                            class="clickable"
                            onclick='handleClick("<%= submission.id %>", "<%= submission.user %>", "<%= submission.title %>", "<%= submission.statusDisplay %>")'
                        >
                            <%= submission.time %>
                        </span>
                        </td>
                        <td><a href="https://leetcode.com/problems/<%= submission.titleSlug %>"><%= submission.title %></a></td>
                        <td class="verdict <%= submission.statusDisplay === 'Accepted' ? 'accepted' : 'rejected' %>">
                            <%= submission.statusDisplay %>
                        </td>
                    </tr>
                <% } else { %>
                    <% return; // Break out of the loop %>
                <% } %>
            <% }); %>
        </tbody>
    </table>
    

    <div id="leaderboard_ss" style="display: none;">

    
        <div id="yearContainer">
            <button id="prevYearBtn">&lt;</button>
            <span id="currentYear"></span>
            <button id="nextYearBtn">&gt;</button>
        </div>

        <div class="calendar" id="calendar">
            <!-- Calendar weeks will be dynamically populated here -->
        </div>
        <div id="photoPopup">
            <img id="photo" class="photo" src="" alt="Screenshot">
        </div>
        <div class="overlay"></div> 
    </div>

    <div id="myModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <div id="modal-header">
                <p><strong>Username:</strong> <span id="username"></span></p>
                <p><strong>Problem:</strong> <span id="problem-name"></span></p>
                <p><strong>Verdict:</strong> <span id="verdict" class="verdict"></span></p>
            </div>

            <button id="copy-button" style="margin-top: 0; margin-bottom: 20px;">Copy Code</button>
            <pre><code id="code-content" class="language-javascript"></code></pre>
        </div>
    </div>
    
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/prism.min.js"></script>
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>

    <!-- <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.24.1/plugins/line-highlight/prism-line-highlight.min.js"></script> -->
<script>
    function handleClick(id, username, problemName, verdict) {
        fetch('/process-submission', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ id: id })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show the modal and populate data
                var modal = document.getElementById("myModal");
                document.getElementById("username").textContent = username || 'N/A';
                document.getElementById("problem-name").textContent = problemName || 'N/A';
                var verdictElement = document.getElementById("verdict");
                verdictElement.textContent = verdict || 'N/A';
                verdictElement.className = 'verdict ' + (verdict === 'Accepted' ? 'accepted' : 'rejected');
                document.getElementById("code-content").textContent = data.code || 'No code available';
                Prism.highlightElement(document.getElementById("code-content"));
                modal.style.display = "block";
            } else {
                console.error("Error:", data.error);
            }
        })
        .catch(error => console.error("Fetch error:", error));
    }

    // Close the modal when the user clicks on <span> (x)
    document.querySelector(".close").onclick = function() {
        document.getElementById("myModal").style.display = "none";
    }

    // Close the modal when the user clicks anywhere outside of the modal
    window.onclick = function(event) {
        var modal = document.getElementById("myModal");
        if (event.target == modal) {
            modal.style.display = "none";
        }
    }

    // Copy code to clipboard

    document.getElementById("copy-button").onclick = function() {
        var codeContent = document.getElementById("code-content").textContent;
        navigator.clipboard.writeText(codeContent)
            .then(() => {
                console.log('Code copied to clipboard!');
                Toastify({
                    text: "Code copied to clipboard!",
                    duration: 3000, // Duration in milliseconds
                    close: true,
                    gravity: "top", // `top` or `bottom`
                    position: "right", // `left`, `center` or `right`
                    backgroundColor: "#4CAF50",
                    stopOnFocus: true, // Prevents dismissing of toast on hover
                }).showToast();
            })
            .catch(err => {
                console.error('Failed to copy code: ', err);
                Toastify({
                    text: "Failed to copy code!",
                    duration: 2000, // Duration in milliseconds
                    close: true,
                    gravity: "top", // `top` or `bottom`
                    position: "right", // `left`, `center` or `right`
                    backgroundColor: "#FF0000",
                    stopOnFocus: true, // Prevents dismissing of toast on hover
                }).showToast();
            });
    }


</script>
    
    <script>
        
        var userSolvedData = JSON.parse('<%- JSON.stringify(user_solved) %>');
    
        function updateSerialNumbers() {
            var rows = document.getElementById("leaderboard").getElementsByTagName("tbody")[0].getElementsByTagName("tr");
            for (var i = 0; i < rows.length; i++) {
                rows[i].getElementsByTagName("td")[0].innerText = i + 1; // Update serial number
            }
        }
    
        function showOverall() {

            document.getElementById("leaderboard").style.display = "table";
            document.getElementById("recentSubmissionsTable").style.display = "none";
            document.getElementById("leaderboard_ss").style.display = "none";
            document.getElementById("contestTable").style.display = "none";

            var rows = document.getElementById("leaderboard").getElementsByTagName("tbody")[0].getElementsByTagName("tr");
            for (var i = 0; i < rows.length; i++) {
                var cells = rows[i].getElementsByTagName("td");
                // Update values for overall view

                // update name
                cells[1].innerHTML = `<a href="https://leetcode.com/${userSolvedData[i].name}">${userSolvedData[i].name}</a>`;
                cells[2].innerText = userSolvedData[i].easy; // Easy
                cells[3].innerText = userSolvedData[i].medium; // Medium
                cells[4].innerText = userSolvedData[i].hard; // Hard
                cells[5].innerText = userSolvedData[i].total; // Total
                cells[6].innerText = userSolvedData[i].points; // Points
            }
    
            updateSerialNumbers(); // Update serial numbers after updating overall view
        }



    
        function showWeekly() {

            document.getElementById("leaderboard").style.display = "table";
            document.getElementById("recentSubmissionsTable").style.display = "none";
            document.getElementById("leaderboard_ss").style.display = "none";
            document.getElementById("contestTable").style.display = "none";

    var rows = document.getElementById("leaderboard").getElementsByTagName("tbody")[0].getElementsByTagName("tr");
    var modifiedUserSolvedData = []; 
    var daily = JSON.parse('<%- JSON.stringify(daily_solved) %>');

    for (var i = 0; i < rows.length; i++) {
        var cells = rows[i].getElementsByTagName("td");
        // Calculate modified values for weekly view
        var modifiedEasy = userSolvedData[i].easy - userSolvedData[i].problems[1];
        var modifiedMedium = userSolvedData[i].medium - userSolvedData[i].problems[2];
        var modifiedHard = userSolvedData[i].hard - userSolvedData[i].problems[3];
        var modifiedTotal = userSolvedData[i].total - userSolvedData[i].problems[0];
        var modifiedPoints = modifiedEasy + 2 * modifiedMedium + 4 * modifiedHard;

        
        var dailySolved;
       
        // find the daily  corresponding to the user
        for (var j = 0; j < daily.length; j++) {
            if (daily[j].user === userSolvedData[i].name) {
                dailySolved = daily[j];
                break;
            }
        }

        // Create an object with modified values
        var modifiedUser = {
            name: userSolvedData[i].name,
            easy: modifiedEasy,
            medium: modifiedMedium,
            hard: modifiedHard,
            total: modifiedTotal,
            points: modifiedPoints,
            daily: dailySolved
           
        };

        // Add the modified object to the new array
        modifiedUserSolvedData.push(modifiedUser);


    }

    // Sort the modifiedUserSolvedData according to the points
    
    modifiedUserSolvedData.sort(function(a, b) {
        return b.points - a.points;
    });


    for (var i = 0; i < rows.length; i++) {
        var cells = rows[i].getElementsByTagName("td");
        // Update values for weekly view
        // update name with modifiedUserSolvedData

        var textColor = modifiedUserSolvedData[i].daily.daily_solved ? "green" : "red";
    
        cells[1].innerHTML = `<a href="https://leetcode.com/${modifiedUserSolvedData[i].name}" style="color: ${textColor};">${modifiedUserSolvedData[i].name}</a>`;
        cells[2].innerText = modifiedUserSolvedData[i].easy; // Easy
        cells[3].innerText = modifiedUserSolvedData[i].medium; // Medium
        cells[4].innerText = modifiedUserSolvedData[i].hard; // Hard
        cells[5].innerText = modifiedUserSolvedData[i].total; // Total
        cells[6].innerText = modifiedUserSolvedData[i].points; // Points
    }

    
}

function showRecentSubmissions() {
    document.getElementById("leaderboard").style.display = "none";
    document.getElementById("recentSubmissionsTable").style.display = "table";
    document.getElementById("leaderboard_ss").style.display = "none";
    document.getElementById("contestTable").style.display = "none";
}

function showLeaderBoard() {
    document.getElementById("leaderboard").style.display = "none";
    document.getElementById("recentSubmissionsTable").style.display = "none";
    document.getElementById("leaderboard_ss").style.display = "block";
    document.getElementById("contestTable").style.display = "none";
    
}

function showContest() {
    document.getElementById("leaderboard").style.display = "none";
    document.getElementById("recentSubmissionsTable").style.display = "none";
    document.getElementById("leaderboard_ss").style.display = "none";
    document.getElementById("contestTable").style.display = "table";
    
}


let currentYear;
        const startYear = 2024; // Change this to the year you want to start the calendar from
        const currentYearElement = document.getElementById('currentYear');
        const prevYearBtn = document.getElementById('prevYearBtn');
        const nextYearBtn = document.getElementById('nextYearBtn');

        generateCalendar();

       // Function to display photo for a specific week
function displayPhotoForWeek(week) {
    const photoPopup = document.getElementById('photoPopup');
    const overlay = document.querySelector('.overlay');
    const photo = document.getElementById('photo');

    // Update the src attribute of the photo element
    photo.src = `screenshots/${week}.png`; // Assuming the screenshots are named as YYYY_weekX.png

    // Show the popup and overlay
    photoPopup.style.display = 'block';
    overlay.style.display = 'block';

    // Hide the popup and overlay when clicking outside the photo
    overlay.addEventListener('click', () => {
        photoPopup.style.display = 'none';
        overlay.style.display = 'none';
    });
}


        // Function to generate the calendar with clickable weeks
        function generateCalendar() {
            const calendarContainer = document.getElementById('calendar');

            // Display current year
            currentYear = "<%= current_year %>";
            currentYear = parseInt(currentYear);
            currentYearElement.textContent = currentYear;

            // Attach event listeners to arrow buttons
            prevYearBtn.addEventListener('click', () => {
                if (currentYear > startYear) {
                    currentYear--;
                    updateCalendar();
                }
            });

            nextYearBtn.addEventListener('click', () => {
                if (currentYear < new Date().getFullYear()) {
                    currentYear++;
                    updateCalendar();
                }
            });

            // Generate the calendar for the current year
            updateCalendar();
        }

        // Function to update the calendar for the current year
        function updateCalendar() {
            currentYearElement.textContent = currentYear;
            prevYearBtn.disabled = currentYear === startYear;
            nextYearBtn.disabled = currentYear === new Date().getFullYear();
            generateCalendarForYear(currentYear);
        }


    // Function to generate the calendar for a specific year
function generateCalendarForYear(year) {
    const calendarContainer = document.getElementById('calendar');
    calendarContainer.innerHTML = ''; // Clear existing calendar

    // Determine the current week and adjust the starting week accordingly
    var currentYear = "<%= current_year %>";
    currentYear = parseInt(currentYear);

    var currentWeek = currentYear === year ? "<%= current_week %>" : 52;
    currentWeek = parseInt(currentWeek);

    const startWeek = year === 2024 ? 17 : 1;

    console.log("Current Year: ", currentYear);
    console.log("Current Week: ", currentWeek);
    console.log("Start Week: ", startWeek);

    // Loop through weeks starting from the adjusted starting week
    for (let week = startWeek; week < currentWeek; week++) {
        // Check if the image file exists for the current week
        const imagePath = `screenshots/${year}_week${week}.png`;
        const weekElement = document.createElement('div');
        weekElement.classList.add('week');

        // Create a circle element for displaying the week number
        const circle = document.createElement('div');
        circle.classList.add('circle');
        circle.textContent = week; // Set the week number

        // Append the circle to the week element
        weekElement.appendChild(circle);

        // Attach click event listener to each week element
        weekElement.addEventListener('click', () => {
            // Display photo for the clicked week in the format "YYYY_weekX"
            displayPhotoForWeek(`${year}_week${week}`);
        });

        calendarContainer.appendChild(weekElement);
    

            
    }
}


    </script>
    
    
</body>
</html>
